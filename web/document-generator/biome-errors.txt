web/document-generator/src/app/wizard/components/steps/PreviewStep.tsx:215:25  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    213 │           try {
    214 │             return await docAuthSystem?.createEditor(container, {
  > 215 │               document: docxDocument!,
        │                         ^^^^^^^^^^^^^
    216 │             });
    217 │           } catch (error) {
  

web/document-generator/src/app/wizard/components/steps/PreviewStep.tsx:230:27  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    228 │               await new Promise((resolve) => setTimeout(resolve, 1000));
    229 │               return await docAuthSystem?.createEditor(container, {
  > 230 │                 document: docxDocument!,
        │                           ^^^^^^^^^^^^^
    231 │               });
    232 │             }
  

web/document-generator/src/app/wizard/components/steps/PreviewStep.tsx:259:25  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    257 │           try {
    258 │             const editor = await docAuthSystem?.createEditor(container, {
  > 259 │               document: docxDocument!,
        │                         ^^^^^^^^^^^^^
    260 │             });
    261 │             console.log('✅ DOCX editor created on retry');
  

web/document-generator/src/components/LiveRegion.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ The default import is only used as a type.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { useEffect, useRef } from 'react';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ interface LiveRegionProps {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
     1  1 │   'use client';
     2  2 │   
     3    │ - import·React,·{·useEffect,·useRef·}·from·'react';
        3 │ + import·type·React·from·'react';
        4 │ + import·{·useEffect,·useRef·}·from·'react';
     4  5 │   
     5  6 │   interface LiveRegionProps {
  

web/document-generator/src/components/LoadingSpinner.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React from 'react';
      │        ^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ interface LoadingSpinnerProps {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    3 │ import·type·React·from·'react';
      │        +++++                   

web/document-generator/src/components/StepErrorBoundary.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ Some named imports are only used as types.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { ReactNode } from 'react';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ import ErrorBoundary from './ErrorBoundary';
    5 │ import { AppError } from '@/lib/errorHandler';
  
  ℹ This import is only used as a type.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { ReactNode } from 'react';
      │                 ^^^^^^^^^
    4 │ import ErrorBoundary from './ErrorBoundary';
    5 │ import { AppError } from '@/lib/errorHandler';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Add inline type keywords.
  
    3 │ import·React,·{·type·ReactNode·}·from·'react';
      │                 +++++                         

web/document-generator/src/components/StepErrorBoundary.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ These imports are unused.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { ReactNode } from 'react';
      │        ^^^^^
    4 │ import ErrorBoundary from './ErrorBoundary';
    5 │ import { AppError } from '@/lib/errorHandler';
  
  ℹ Unused imports might be the result of an incomplete refactoring.
  
  ℹ Unsafe fix: Remove the unused imports.
  
    3 │ import·React,·{·ReactNode·}·from·'react';
      │        -------                           

web/document-generator/src/components/StepErrorBoundary.tsx:5:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { ReactNode } from 'react';
    4 │ import ErrorBoundary from './ErrorBoundary';
  > 5 │ import { AppError } from '@/lib/errorHandler';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │ import { StepType } from '@/types';
    7 │ 
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    5 │ import·type·{·AppError·}·from·'@/lib/errorHandler';
      │        +++++                                       

web/document-generator/src/components/StepErrorBoundary.tsx:6:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    4 │ import ErrorBoundary from './ErrorBoundary';
    5 │ import { AppError } from '@/lib/errorHandler';
  > 6 │ import { StepType } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    7 │ 
    8 │ interface StepErrorBoundaryProps {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    6 │ import·type·{·StepType·}·from·'@/types';
      │        +++++                            

web/document-generator/src/components/Toast.tsx:3:8   FIXABLE  ━━━━━━━━━━━━━

  ⚠ The default import is only used as a type.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { useEffect } from 'react';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ import { classNames } from '@/lib/utils';
    5 │ 
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
      1   1 │   'use client';
      2   2 │   
      3     │ - import·React,·{·useEffect·}·from·'react';
          3 │ + import·type·React·from·'react';
          4 │ + import·{·useEffect·}·from·'react';
      4   5 │   import { classNames } from '@/lib/utils';
      5   6 │   
  

web/document-generator/src/components/Transition.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ This import is unused.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React from 'react';
      │        ^^^^^
    4 │ import { TransitionProps } from '@/types';
    5 │ 
  
  ℹ Unused imports might be the result of an incomplete refactoring.
  
  ℹ Unsafe fix: Remove the unused imports.
  
     1  1 │   'use client';
     2    │ - 
     3    │ - import·React·from·'react';
        2 │ + 
     4  3 │   import { TransitionProps } from '@/types';
     5  4 │   
  

web/document-generator/src/components/Transition.tsx:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React from 'react';
  > 4 │ import { TransitionProps } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ 
    6 │ export default function Transition({ isVisible, message }: TransitionProps) {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·TransitionProps·}·from·'@/types';
      │        +++++                                   

web/document-generator/src/components/steps/DataEditor.tsx:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { useEffect, useRef, useCallback } from 'react';
  > 4 │ import { AppState } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ import { STEP_TITLES } from '@/lib/constants';
    6 │ import { fetchTemplateData, validateJsonString } from '@/lib/utils';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·AppState·}·from·'@/types';
      │        +++++                            

web/document-generator/src/components/steps/DocxEditor.tsx:190:30   FIXABLE  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    189 │       try {
  > 190 │         const editor = await docAuthSystem!.createEditor(container, {
        │                              ^^^^^^^^^^^^^^
    191 │           document: docxDocument!,
    192 │         });
  
  ℹ Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    188 188 │   
    189 189 │         try {
    190     │ - ········const·editor·=·await·docAuthSystem!.createEditor(container,·{
        190 │ + ········const·editor·=·await·docAuthSystem?.createEditor(container,·{
    191 191 │             document: docxDocument!,
    192 192 │           });
  

web/document-generator/src/components/steps/DocxEditor.tsx:191:21  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    189 │       try {
    190 │         const editor = await docAuthSystem!.createEditor(container, {
  > 191 │           document: docxDocument!,
        │                     ^^^^^^^^^^^^^
    192 │         });
    193 │         console.log('✅ DOCX editor created successfully:', editor);
  

web/document-generator/src/components/steps/DocxEditor.tsx:205:34   FIXABLE  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    203 │         if (container.isConnected && container.parentElement) {
    204 │           try {
  > 205 │             const editor = await docAuthSystem!.createEditor(container, {
        │                                  ^^^^^^^^^^^^^^
    206 │               document: docxDocument!,
    207 │             });
  
  ℹ Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    203 203 │           if (container.isConnected && container.parentElement) {
    204 204 │             try {
    205     │ - ············const·editor·=·await·docAuthSystem!.createEditor(container,·{
        205 │ + ············const·editor·=·await·docAuthSystem?.createEditor(container,·{
    206 206 │                 document: docxDocument!,
    207 207 │               });
  

web/document-generator/src/components/steps/DocxEditor.tsx:206:25  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    204 │           try {
    205 │             const editor = await docAuthSystem!.createEditor(container, {
  > 206 │               document: docxDocument!,
        │                         ^^^^^^^^^^^^^
    207 │             });
    208 │             console.log(
  

web/document-generator/src/components/steps/DocxEditor.tsx:3:28   FIXABLE  ━━━━━━━━━━

  ⚠ Several of these imports are unused.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { useEffect, useLayoutEffect, useRef, useCallback } from 'react';
      │                            ^^^^^^^^^^^^^^^
    4 │ import { AppState } from '@/types';
    5 │ import { STEP_TITLES } from '@/lib/constants';
  
  ℹ Unused imports might be the result of an incomplete refactoring.
  
  ℹ Unsafe fix: Remove the unused imports.
  
    3 │ import·React,·{·useEffect,·useLayoutEffect,·useRef,·useCallback·}·from·'react';
      │                            -----------------                                   

web/document-generator/src/components/steps/DocxEditor.tsx:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { useEffect, useLayoutEffect, useRef, useCallback } from 'react';
  > 4 │ import { AppState } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ import { STEP_TITLES } from '@/lib/constants';
    6 │ 
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·AppState·}·from·'@/types';
      │        +++++                            

web/document-generator/src/components/steps/DocxEditor.tsx:95:7   FIXABLE  ━━━━━━━━━━

  ⚠ This let declares a variable that is only assigned once.
  
    93 │       // Generate DOCX from template and data if not already done
    94 │       let docxDocument = appState.docxDocument;
  > 95 │       let docAuthSystem = appState.docAuthSystem;
       │       ^^^
    96 │ 
    97 │       if (!docxDocument) {
  
  ℹ 'docAuthSystem' is never reassigned.
  
    93 │       // Generate DOCX from template and data if not already done
    94 │       let docxDocument = appState.docxDocument;
  > 95 │       let docAuthSystem = appState.docAuthSystem;
       │           ^^^^^^^^^^^^^
    96 │ 
    97 │       if (!docxDocument) {
  
  ℹ Safe fix: Use const instead.
  
     93  93 │         // Generate DOCX from template and data if not already done
     94  94 │         let docxDocument = appState.docxDocument;
     95     │ - ······let·docAuthSystem·=·appState.docAuthSystem;
         95 │ + ······const·docAuthSystem·=·appState.docAuthSystem;
     96  96 │   
     97  97 │         if (!docxDocument) {
  

web/document-generator/src/components/steps/PdfViewer.tsx:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { useEffect, useRef, useCallback } from 'react';
  > 4 │ import { AppState } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ import { STEP_TITLES } from '@/lib/constants';
    6 │ import { downloadPdf } from '@/lib/utils';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·AppState·}·from·'@/types';
      │        +++++                            

web/document-generator/src/components/steps/TemplateEditor.tsx:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { useEffect, useRef, useCallback } from 'react';
  > 4 │ import { AppState } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ import { STEP_TITLES } from '@/lib/constants';
    6 │ import { fetchTemplateJson } from '@/lib/utils';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·AppState·}·from·'@/types';
      │        +++++                            

web/document-generator/src/components/steps/TemplateSelection.tsx:26:3  ━━━━━━━━━━

  ⚠ This parameter is unused.
  
    24 │   navigateToStep,
    25 │   showError,
  > 26 │   showWarning,
       │   ^^^^^^^^^^^
    27 │ }: TemplateSelectionProps) {
    28 │   const [selectedFile, setSelectedFile] = useState<File | null>(null);
  
  ℹ Unused parameters might be the result of an incomplete refactoring.
  

web/document-generator/src/components/steps/TemplateSelection.tsx:3:8   FIXABLE  ━━━━━━━━━━

  ⚠ The default import is only used as a type.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import React, { useState, useCallback } from 'react';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ import Image from 'next/image';
    5 │ import { AppState, TemplateType } from '@/types';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
      1   1 │   'use client';
      2   2 │   
      3     │ - import·React,·{·useState,·useCallback·}·from·'react';
          3 │ + import·type·React·from·'react';
          4 │ + import·{·useState,·useCallback·}·from·'react';
      4   5 │   import Image from 'next/image';
      5   6 │   import { AppState, TemplateType } from '@/types';
  

web/document-generator/src/components/steps/TemplateSelection.tsx:5:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import React, { useState, useCallback } from 'react';
    4 │ import Image from 'next/image';
  > 5 │ import { AppState, TemplateType } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │ import { TEMPLATE_OPTIONS, STEP_TITLES } from '@/lib/constants';
    7 │ import { readFileAsArrayBuffer } from '@/lib/utils';
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    5 │ import·type·{·AppState,·TemplateType·}·from·'@/types';
      │        +++++                                          

web/document-generator/src/components/steps/TemplateSelection.tsx:22:3  ━━━━━━━━━━

  ⚠ This parameter is unused.
  
    21 │ export default function TemplateSelection({
  > 22 │   appState,
       │   ^^^^^^^^
    23 │   updateAppState,
    24 │   navigateToStep,
  
  ℹ Unused parameters might be the result of an incomplete refactoring.
  

web/document-generator/src/hooks/useFocusManagement.ts:53:11   FIXABLE  ━━━━━━━━━━

  ⚠ Change to an optional chain.
  
    51 │       const element = containerElement.querySelector(selector) as HTMLElement;
    52 │ 
  > 53 │       if (element && element.focus) {
       │           ^^^^^^^^^^^^^^^^^^^^^^^^
    54 │         element.focus();
    55 │         return true;
  
  ℹ Unsafe fix: Change to an optional chain.
  
     51  51 │         const element = containerElement.querySelector(selector) as HTMLElement;
     52  52 │   
     53     │ - ······if·(element·&&·element.focus)·{
         53 │ + ······if·(element?.focus)·{
     54  54 │           element.focus();
     55  55 │           return true;
  

web/document-generator/src/hooks/useFocusManagement.ts:189:9  ━━━━━━━━━━

  ⚠ Forbidden non-null assertion.
  
    187 │       announcer.textContent = '';
    188 │       setTimeout(() => {
  > 189 │         announcer!.textContent = announcement;
        │         ^^^^^^^^^^
    190 │       }, 100);
    191 │     },
  

web/document-generator/src/hooks/useFocusManagement.ts:3:31   FIXABLE  ━━━━━━━━━━

  ⚠ Several of these imports are unused.
  
    1 │ 'use client';
    2 │ 
  > 3 │ import { useCallback, useRef, useEffect } from 'react';
      │                               ^^^^^^^^^
    4 │ 
    5 │ export function useFocusManagement() {
  
  ℹ Unused imports might be the result of an incomplete refactoring.
  
  ℹ Unsafe fix: Remove the unused imports.
  
    3 │ import·{·useCallback,·useRef,·useEffect·}·from·'react';
      │                               ----------               

web/document-generator/src/hooks/useKeyboardNavigation.ts:4:8   FIXABLE  ━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import { useCallback, useEffect, useMemo } from 'react';
  > 4 │ import { StepType } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ 
    6 │ interface KeyboardNavigationOptions {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·StepType·}·from·'@/types';
      │        +++++                            

web/document-generator/src/hooks/useToast.ts:4:8   FIXABLE  ━━━━━━━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
    3 │ import { useState, useCallback } from 'react';
  > 4 │ import { Toast, ToastType } from '@/components/Toast';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ 
    6 │ export function useToast() {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    4 │ import·type·{·Toast,·ToastType·}·from·'@/components/Toast';
      │        +++++                                               

web/document-generator/src/lib/constants.ts:1:8   FIXABLE  ━━━━━━━━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
  > 1 │ import { type TemplateOption } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ 
    3 │ export const TEMPLATE_OPTIONS: TemplateOption[] = [
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
     1    │ - import·{·type·TemplateOption·}·from·'@/types';
        1 │ + import·type·{·TemplateOption·}·from·'@/types';
     2  2 │   
     3  3 │   export const TEMPLATE_OPTIONS: TemplateOption[] = [
  

web/document-generator/src/lib/errorHandler.ts:1:8   FIXABLE  ━━━━━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
  > 1 │ import { StepType } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ 
    3 │ export class AppError extends Error {
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    1 │ import·type·{·StepType·}·from·'@/types';
      │        +++++                            

web/document-generator/src/lib/utils.ts:1:8   FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ⚠ All these imports are only used as types.
  
  > 1 │ import { TemplateData, TemplateType } from '@/types';
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ 
    3 │ export const fetchTemplateData = async (
  
  ℹ Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  ℹ Safe fix: Use import type.
  
    1 │ import·type·{·TemplateData,·TemplateType·}·from·'@/types';
      │        +++++                                              